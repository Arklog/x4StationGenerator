# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches:
      - master
      - dev
      - '*'
    tags:
      - 'v*' # Push events to matching v*, i.e., v1.0, v20.15.10
  pull_request:
    tags:
      - 'v*' # Pull request events to matching v*, i.e., v1.0, v20.15.10

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      QT_VERSION: 6.9.0
      QT_ARCHITECTURE: win64_msvc2022_64
      DIST_DIRECTORY: ${{ github.workspace }}\dist
      SCCACHE_GHA_ENABLED: "true"

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ windows-latest ]
        build_type: [ Release ]
        c_compiler: [ gcc, clang, cl ]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}\build" >> "$GITHUB_OUTPUT"
          echo "qt-dir=${{ github.workspace }}\Qt" >> "$GITHUB_OUTPUT"

      - name: Setup cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.strings.outputs.build-output-dir }}
          key: ${{ matrix.os }}-build
          restore-keys: ${{ matrix.os }}-build

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          host: 'windows'
          version: '${{ env.QT_VERSION }}'
          arch: '${{ env.QT_ARCHITECTURE }}'
          cache: true
          dir: '${{ steps.strings.outputs.qt-dir }}'

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        env:
          CMAKE_PREFIX_PATH: ${{ env.Qt5_Dir }}
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}
          

      - name: Build
        # Build your program  with the given configuration. Note that --config is needed because the default  Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -j 4

      - name: Copy Qt DLLs
        env:
          QT_BIN_DIR: ${{ steps.strings.outputs.qt-dir }}\Qt\${{env.QT_VERSION}}\msvc2022_64\bin
        run: |
          mkdir -p ${{ env.DIST_DIRECTORY }} &&
          mv ${{ steps.strings.outputs.build-output-dir }}\Release\x4StationGenerator.exe ${{ env.DIST_DIRECTORY }} &&
          ${{ env.QT_BIN_DIR }}\windeployqt.exe ${{ env.DIST_DIRECTORY }}\x4StationGenerator.exe
      #        run: ${{ env.QT_BIN_DIR }}\windeployqt.exe ${{ steps.strings.outputs.build-output-dir }}\Release\x4StationGenerator.exe

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Compress Binary
        env:
          BIN_DIR: ${{ steps.strings.outputs.build-output-dir }}\Release
        run: 7z a -tzip ${{ env.DIST_DIRECTORY}}\x4StationGenerator.zip ${{ env.DIST_DIRECTORY }}\*

      - name: Release binary
        uses: softprops/action-gh-release@v2
        if:
          startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ${{ env.DIST_DIRECTORY }}\x4StationGenerator.zip
          token: ${{ secrets.GITHUB_TOKEN }}
